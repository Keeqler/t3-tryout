// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id Int @id @default(autoincrement())

  type                     String
  provider                 String
  providerAccountId        String
  expires_at               Int?
  refresh_token            String? // @db.Text
  refresh_token_expires_in Int?
  access_token             String? // @db.Text
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id Int @id @default(autoincrement())

  sessionToken String   @unique
  expires      DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id Int @id @default(autoincrement())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  Post     Post[]
  Vote     Vote[]
}

model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @updatedAt

  content   String
  voteCount Int    @default(0)

  authorId Int
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes    Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @updatedAt

  increment Int

  voterId Int
  voter   User @relation(fields: [voterId], references: [id], onDelete: Cascade)
  postId  Int
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
